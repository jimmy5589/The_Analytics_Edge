install.packages("devtools")
library(devtools)
install_github("genomicsclass/dagdata")
install_github("ririzarr/rafalib")
q()
x<-1:10
y<-rnorm(10)
plot(x,y)
setwd("~/Desktop/edX/The_Analytics_Edge/Datasets")
dailykos = read.csv("dailykos.csv")
str(dailykos)
distances = dist(dailykos[1:1545], method = "euclidean")
cluster = hclust(distances, method = "ward.D")
plot(cluster)
clusterGroups = cutree(cluster, k=7)
cluster3 = subset(dailykos, clusterGroups == 3)
cluster1 = subset(dailykos, clusterGroups == 1)
cluster2 = subset(dailykos, clusterGroups == 2)
cluster3 = subset(dailykos, clusterGroups == 3)
cluster4 = subset(dailykos, clusterGroups == 4)
cluster5 = subset(dailykos, clusterGroups == 5)
cluster6 = subset(dailykos, clusterGroups == 6)
cluster7 = subset(dailykos, clusterGroups == 7)
colMeans(cluster1)
sort(colMeans(cluster1))
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
k=7
set.seed(1000)
daylykos.mat = as.matrix(dailykos)
daylykos.vec = as.vector(dailykos.mat)
daylykos.mat = as.matrix(dailykos)
daylykos.vec = as.vector(dailykos.mat)
rm(daylykos.mat)
k=7
dailykos.mat = as.matrix(dailykos)
dailykos.vec = as.vector(dailykos.mat)
set.seed(1000)
set.seed(1000)
KMC = kmeans(healthyVector, centers = k)
set.seed(1000)
KMC = kmeans(dailykos.vec, centers = k)
str(KMC)
dailykos.cluster = KMC$cluster
cluster3 = subset(dailykos, dailykos.cluster == 3)
cluster1 = subset(dailykos, dailykos.cluster == 1)
cluster2 = subset(dailykos, dailykos.cluster == 2)
cluster2 = subset(dailykos.vec, dailykos.cluster == 2)
str(dailykos.vec)
set.seed(1000)
KMC = kmeans(dailykos, centers = k)
str(KMC)
#Extract clusters
dailykos.cluster = KMC$cluster
cluster3 = subset(dailykos, dailykos.cluster == 3)
k=7
set.seed(1000)
KMC = kmeans(dailykos, centers = k)
str(KMC)
#Extract clusters
dailykos.cluster = KMC$cluster
cluster1 = subset(dailykos, dailykos.cluster == 1)
cluster2 = subset(dailykos, dailykos.cluster == 2)
cluster3 = subset(dailykos, dailykos.cluster == 3)
cluster4 = subset(dailykos, dailykos.cluster == 4)
cluster5 = subset(dailykos, dailykos.cluster == 5)
cluster6 = subset(dailykos, dailykos.cluster == 6)
cluster7 = subset(dailykos, dailykos.cluster == 7)
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
cluster = hclust(distances, method = "ward.D")
clusterGroups = cutree(cluster, k=7)
clusterh1 = subset(dailykos, clusterGroups == 1)
clusterh2 = subset(dailykos, clusterGroups == 2)
clusterh3 = subset(dailykos, clusterGroups == 3)
clusterh4 = subset(dailykos, clusterGroups == 4)
clusterh5 = subset(dailykos, clusterGroups == 5)
clusterh6 = subset(dailykos, clusterGroups == 6)
clusterh7 = subset(dailykos, clusterGroups == 7)
table(dailykos.cluster, clusterGroups)
kmeansCluster = dailykos.cluster
171/277
table.prop(table(dailykos.cluster, clusterGroups))
prop.table(table(dailykos.cluster, clusterGroups))
prop.table(table(dailykos.cluster, clusterGroups), digits=4)
?prop.table
?round
round(prop.table(table(dailykos.cluster, clusterGroups)), digits=4)
table(dailykos.cluster, clusterGroups)
rm(list=ls())
ll
rm(list=ls())
airlines = read.csv("AirlinesCluster.csv")
summary(airlines)
library(caret)
preproc = preProcess(airlines)
airlinesNorm = predict(preproc, airlines)
summary(airlinesNorm)
summary(preproc)
summary(airlinesNorm)
distances = dist(airlinesNorm, "euclidean")
hcluster = hclust(distances, "ward.D")
plot(hcluster)
clusterGroups = cutree(hcluster, k=5)
summary(clusterGroups)
str(clusterGroups)
table(clusterGroups)
tapply(airlines$Balance, clusterGroups, mean)
tapply(airlines, clusterGroups, mean)
spl=split(airlines, clusterGroups)
lapply(spl, colMeans)
round(lapply(spl, colMeans), digits=7)
means=lapply(spl, colMeans)
summary(means)
str(means)
means[[1]]
round(means[[1]], digits=10)
means[[1]]>means
means[[1]]>means[[2]]
means[[1]]>means[[3]]
means[[1]]>means[[4]]
means[[1]]>means[[5]]
means[[2]]>means[[1:5]]
table(means, means)
means[[2]]>means[[1]]
means[[2]]>means[[2]]
for ( i in c(1,3,4,5)){
means[[2]]>means[[i]]
}
for ( i in 1:5){
means[[2]]>means[[i]]
}
for ( i in 1:5){
print(paste(" i is:",i))
means[[2]] > means[[i]]
}
for ( i in c(1,3,4,5)){
print(paste(" i is:",i))
means[[2]] > means[[i]]
}
sapply(1:5, function(x) means[[2]]>means[[x]])
sapply(c(1,3,4,5), function(x) means[[2]]>means[[x]])
sapply(c(1,2,4,5), function(x) means[[3]]>means[[x]])
sapply(c(1,2,3,5), function(x) means[[4]]>means[[x]])
means[[4]]
sapply(c(1,2,3,4), function(x) means[[5]]>means[[x]])
means[[5]]
k=5
set.seed(88)
kmeansClust = kmeans(airlinesNorm, centers = k, iter.max = 1000)
str(kmeansClust)
tab(kmeansClust$cluster)
table(kmeansClust$cluster)
kmeansClust$centers
means
splk=split(airlines, kmeansClust$cluster)
meansk=lapply(splk, colMeans)
means
meansk
means-meansk
means[[1]]
meansk[[1]]
sapply(1:5, function(x) means[[x]]-meansk[[x]])
options(digits=8)
sapply(1:5, function(x) means[[x]]-meansk[[x]])
plot(meansk[[1]])
points(means[[1]], col="red")
plot(meansk[[2]])
points(means[[2]], col="red")
plot(meansk[[3]])
points(means[[3]], col="red")
plot(meansk[[4]])
points(means[[4]], col="red")
plot(meansk[[5]])
points(means[[5]], col="red")
plot(meansk[[4]])
str(kmeansClust)
kmeansClust$centers
plot(meansk[[1]])
points(means[[1]], col="red")
plot(meansk[[1]])
points(means[[2]], col="red")
kmeansClust$centers
plot(kmeansClust$centers)
plot(kmeansClust$centers[1])
plot(kmeansClust$centers[1,])
table(kmeansClust$cluster, clusterGroups)
rm(list=ls())
stocks = read.csv("StocksCluster.csv")
summary(stocks)
table(stocks$PositiveDec > 0)
table.prop(table(stocks$PositiveDec > 0))
prop.table(table(stocks$PositiveDec > 0))
cor(stocks)
max(cor(stocks))
?max
stocks[1,]
corr=cor(stocks)
sapply(1:12, function(x) corr[x,x]=0)
corr
sapply(1:12, function(x) corr[x,x] = 0)
for (i in 1:12){
corr[i,i] = 0
}
corr
max(corr)
summary(stocks)
str(stocks)
colmenas(stocks[1:11])
colmeans(stocks[1:11])
colMeans(stocks[1:11])
max(colMeans(stocks[1:11]))
min(colMeans(stocks[1:11]))
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~ ., data=stocksTrain, family = "binomial")
summary(StocksModel)
pred = predict(StockModel, data=stocksTrain)
pred = predict(StocksModel, data=stocksTrain)
pred = predict(StocksModel, data=stocksTrain, type = "response")
table(stocks$PositiveDec)
prop.table(table(stocks$PositiveDec))
pred = predict(StocksModel, type = "response")
prop.table(table(stocks$PositiveDec))
table(stocks$PositiveDec >= 0.5)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~ ., data=stocksTrain, family = "binomial")
summary(StocksModel)
pred = predict(StocksModel, type = "response")
table(stocks$PositiveDec >= 0.5)
6324/nrow(stocksTrain)
nrow(stocksTrain)
table(stocks$PositiveDec, pred >= 0.5)
pred = predict(StocksModel, data=stocksTrain, type = "response")
table(stocks$PositiveDec, pred >= 0.5)
summary(pred)
table(stocksTrain$PositiveDec, pred >= 0.5)
(990+3640)/nrow(stocksTrain)
table(stocksTrain$PositiveDec, pred)
table(stocksTrain$PositiveDec, pred > 0.5)
(990+3640)/nrow(stocksTrain)
predt = predict(StocksModel, newdata = stocksTest, type = "response")
table(stocksTest$PositiveDec, predt >= 5)
(1897)/nrow(stocksTest)
(1897)/(1577+1897)
(1897)/nrow(stocksTest)
StocksModel = glm(PositiveDec ~ ., data=stocksTrain, family = "binomial")
pred = predict(StocksModel, type = "response")
table(stocksTrain$PositiveDec, pred > 0.5)
(990+3640)/nrow(stocksTrain)
predt = predict(StocksModel, newdata = stocksTest, type = "response")
table(stocksTest$PositiveDec, predt >= 5)
table(stocksTest$PositiveDec, predt > 5)
table(stocksTest$PositiveDec)
head(stocksTrain)
predt = predict(StocksModel, newdata = stocksTest)
table(stocksTest$PositiveDec, predt >=0.5)
(1427+312)/nrow(stocksTest)
head(predt)
head(predt, 30)
predtp = predict(StocksModel, newdata = stocksTest, type = "response")
head(predtp, 30)
options()
options(digits)
options(digit)
options[digits]
options$digits
?options
getOption("digits")
fosessionIn
SessionInfo
