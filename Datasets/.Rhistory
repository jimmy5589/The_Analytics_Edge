a<-[1,2,3,4]
a<-c(1,2,3,4)
mean(a)
license()
RShowDoc("LGPL-3")
a[1]
a>3
as.numeric(a>3)
setwd("/opt/oracle/admin/R/Datasets")
read.csv(WHO.csv)
read.csv("WHO.csv")
WHO=read.csv("WHO.csv")
summary(WHO)
summary(WHO)
attach(WHO)
table(region,country)
table(Region,Country)
summary(WHO)
str(WHO)
table(Region, Population)
table(Region, Country)
rm(WHO)
mvt=read.csv("mvtWeek1.csv")
summary(mvt)
attach(mvt)
table(Year, LocationDescription)
gas=mvt[LocationDescription=="GAS STATION"]
gas=mvt[LocationDescription=="GAS STATION",]
str(gas)
summary(gas)
gas$LocationDescription=factor(gas$LocationDescription)
str(gas)
table(gas$Year, gas$Arrest)
mytable=table(gas$Year, gas$Arrest)
mytable
prop.table(mytable,1)
55/(167+55)
boxplot(gas$Arrest ~ gas$Year)
boxplot(gas$Year ~ gas$Arrest)
rm(list=ls())
IBM=read.csv("IBMStock.csv")
GE=read.csv("GEStock.csv")
ProcterGamble=read.csv("ProcterGambleStock.csv")
CocaCola=read.csv("CocaColaStock.csv")
Boeing=read.csv("BoeingStock.csv")
str(IBM)
head(IBM)
tail(IBM)
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
str(IBM)
min(IBM$Date)
max(IBM$Date)
summary(IBM)
summary(GE)
summary(CocaCola)
summary(Boeing)
sd(ProcterGamble$StockPrice)
plot(CocaCola$Date, CocaCola$StockPrice)
plot(CocaCola$Date, CocaCola$StockPrice, type="l")
plot(CocaCola$Date, CocaCola$StockPrice, type="l", col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col="blue")
abline(v=as.Date(c("2000-03-01")), lwd=2)
plot(CocaCola$Date, CocaCola$StockPrice, type="l", col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col="blue")
abline(v=as.Date(c("2000-03-01")), lwd=2)
plot(CocaCola$Date, CocaCola$StockPrice, type="l", col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col="blue")
abline(v=as.Date(c("1983-03-01")), lwd=2)
abline(v=as.Date(c("1983-01-01")), lwd=2)
abline(v=as.Date(c("1983-12-01")), lwd=2)
plot(CocaCola$Date, CocaCola$StockPrice, type="l", col="red")
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col="blue")
colors()
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(ProcterGamble$Date[301:432], ProcterGamble[301:432], col="blue")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col="blue")
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col="purple")
lines(GE$Date[301:432], GE$StockPrice[301:432], col="green")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="yellow")
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col="blue")
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col="purple")
lines(GE$Date[301:432], GE$StockPrice[301:432], col="green")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="black")
abline(v=as.Date(c("2000-03-01")), lwd=2)
abline(v=as.Date(c("1997-09-01")), lwd=2)
abline(v=as.Date(c("1997-11-30")), lwd=2)
abline(v=as.Date(c("2004-01-01")), lwd=2)
abline(v=as.Date(c("2005-12-30")), lwd=2)
tapply(IBM$StockPrice, Months(IBM$Date), mean)
tapply(IBM$StockPrice, months(IBM$Date), mean)
mean(IBM$StockPrice)
myv=tapply(IBM$StockPrice, months(IBM$Date), mean)
myv
myv>mean(IBM$StockPrice)
rm(myv)
tapply(IBM$StockPrice, months(IBM$Date), mean) > mean(IBM$StockPrice)
tapply(GE$StockPrice, months(GE$Date), mean) > mean(GE$StockPrice)
tapply(Boeing$StockPrice, months(Boeing$Date), mean) > mean(Boeing$StockPrice)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean) > mean(CocaCola$StockPrice)
tapply(ProcterGamble$StockPrice, months(ProcterGamble$Date), mean) > mean(ProcterGamble$StockPrice)
tapply(GE$StockPrice, months(GE$Date), mean)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
max(tapply(GE$StockPrice, months(GE$Date), mean))
which.max(tapply(GE$StockPrice, months(GE$Date), mean))
which.max(tapply(CocaCola$StockPrice, months(CocaCola$Date), mean))
which.max(tapply(CocaCola$StockPrice, months(CocaCola$Date), mean))[3]
which.max(tapply(CocaCola$StockPrice, months(CocaCola$Date), mean))[1,3]
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)[3]
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)["January"]
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)[c("December","January")]
tapply(GE$StockPrice, months(GE$Date), mean)[c("December","January")]
tapply(IBM$StockPrice, months(IBM$Date), mean)[c("December","January")]
rm(list=ls())
CPS=read.csv("CPSData.csv")
summary(CPS)
str(CPS)
table(CPS$Industry)
max(table(CPS$Industry))
which.max(table(CPS$Industry))
str(CPS)
sort(table(CPS$Region))
sort(table(CPS$State))
str(CPS)
attach(CPS)
detach(WHO)
attach(CPS)
table(Citizenship)
prop.table(Citizenship, 1)
prop.table(Citizenship)
prop.table(CPS$Citizenship, 1)
7590/(sum(Citizenship))
7590/(nrow(Citizenship))
7590/(116639+7073+7590)
7590/(nrow(CPS))
table(Citizenship)/nrow(CPS)
1-0.05780567
str(CPS)
table(Race, Hispanic)
table(Race, Hispanic)>250
nrow(Industry)
nrow(CPS[Industry==NA,])
nrow(CPS)
nrow(subset(CPS, na.rem=TRUE))
tab(CPS)
summary(CPS)
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$Citizenship, is.na(CPS$Married))
str(CPS)
table(State, is.na(MetroAreCode))
table(CPS$State, is.na(CPS$MetroAreCode))
table(State, is.na(MetroAreaCode))
table(State, is.na(MetroAreaCode))==0
table(State, is.na(MetroAreaCode))
table(State, is.na(MetroAreaCode))==0
table(State, is.na(MetroAreaCode))
t=table(State, is.na(MetroAreaCode))
str(t)
str(CPS)
table(Region, is.na(MetroAreaCode))
prop.table(Region, is.na(MetroAreaCode))
prop.table(table(Region, is.na(MetroAreaCode)))
prop.table(table(Region, is.na(MetroAreaCode)),1)
prop.table(table(State, is.na(MetroAreaCode)),1)
sort(prop.table(table(State, is.na(MetroAreaCode)),1))
prop.table(table(State, is.na(MetroAreaCode)),1)
prop.table(table(State, is.na(MetroAreaCode)),1)-0.3
abs(prop.table(table(State, is.na(MetroAreaCode)),1)-0.3)
abs(prop.table(table(State, is.na(MetroAreaCode)),1)-0.3)<0.00067
abs(prop.table(table(State, is.na(MetroAreaCode)),1)-0.3)<0.00068
prop.table(table(State, is.na(MetroAreaCode)),1)
prop.table(table(State, is.na(MetroAreaCode)),1)
prop.table(table(State, is.na(MetroAreaCode)),1)[TRUE==1,]
prop.table(table(State, is.na(MetroAreaCode)),1)>0.75
prop.table(table(State, is.na(MetroAreaCode)),1)
prop.table(table(State, is.na(MetroAreaCode)),1)>0.8
tapply(is.na(CPS$MetroAreaCode), CPS$State, mean)
sort(tapply(is.na(CPS$MetroAreaCode), CPS$State, mean))
rm(t)
MetroAreaMap=read.csv("MetroAreaCodes.csv")
CountryMap=read.csv("CountryCodes")
CountryMap=read.csv("CountryCodes.csv")
str(MetroAreaCode)
str(CountryMap)
summary(MetroAreaCode)
nrow(MetroAreaCode)
detach(CPS)
summary(MetroAreaMap)
nrow(MetroAreMap)
nrow(MetroAreaMap)
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
summary(CPS)
table(CPS$MetroArea)
sort(table(CPS$MetroArea))
summary(CPS)
sort(table(CPS$MetroArea))
table(CPS$MetroArea)
head(table(CPS$MetroArea))
head(table(CPS$MetroArea),20)
head(table(CPS$MetroArea),30)
head(table(CPS$MetroArea),40)
sort(table(CPS$MetroArea))
summary(CPS)
tapply(CPS$Hispanic, CPS$MetroArea, mean)
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))
tapply(CPS$Race=="Asian", CPS$MetroArea, mean)
summary(CPS)
sort(tapply(CPS$Race=="Asian", CPS$MetroArea, mean))
sort(tapply(CPS$Race=="Asian", CPS$MetroArea, mean))>0.2
?sort
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, meani, na.rm=TRUE), decreasing=FALSE)
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm=TRUE), decreasing=FALSE)
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm=TRUE), decreasing=TRUE)
summary(CPS)
str(CountryMap)
CPS = merge(CPS, CountryMap, by.x="CountryOfBirthCode", by.y="Code", all.x=TRUE)
str(CPS)
nrow(CPS[is.na(Country),])
nrow(CPS[is.na(CPS$Country),])
nrow(CPS)
summary(CPS)
table(CPS$Country)
sort(table(CPS$Country))
names(CPS)
tapply(is.na(MetroArea),Country, mean )
tapply(is.na(CPS$MetroArea),CPS$Country, mean )
tapply(CPS$Country,i CPS$MetroArea, mean )
tapply(CPS$Country, CPS$MetroArea, mean )
v=CPS[CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",]
summary(v)
str(v)
v$MetroArea=factor(v$MetroArea)
str(v)
table(v$CountryBirth)
table(v$Country)
table(v$Country="United States")
table(v$Country=="United States")
table(CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" ,v$Country=="United States")
table(CPS[CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA",] ,v$Country=="United States")
table(v$Country=="United States")
table(v$Country=="United States" | is.na(v$Country))
nrow(v)
v=CPS[CPS$MetroArea=="New York-Northern New Jersey-Long Island, NY-NJ-PA" & !is.na(CPS$Country),]
summary(v)
v$MetroArea=factor(v$MetroArea)
table(v$Country=="United States")
prop.table(table(v$Country=="United States"),1)
prop.table(v$Country=="United States")
table(v$Country=="United States")
1668/(1668+3736)
tapply(v$Country=="United States", v$MetroArea, mean)
tapply(v$Country!="United States", v$MetroArea, mean)
rm(v)
table(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country != "United States")
t.apply(CPS$Country=="India", CPS$MetroArea, sum, na.rm=TRUE)
tapply(CPS$Country=="India", CPS$MetroArea, sum, na.rm=TRUE)
sort(tapply(CPS$Country=="India", CPS$MetroArea, sum, na.rm=TRUE))
sort(tapply(CPS$Country=="Brazil", CPS$MetroArea, sum, na.rm=TRUE))
sort(tapply(CPS$Country=="Somalia", CPS$MetroArea, sum, na.rm=TRUE))
setwd("/opt/oracle/admin/R/The_Analytics_Edge/Datasets")
rm(list=ls())
climate=read.csv("climate_change.csv")
summary(climate)
training=subset(climate, climate$Year <= 2006)
table(training$Year)
test=subset(climate, climate$Year > 2006)
table(test$Year)
rm(test)
testing=subset(climate, climate$Year > 2006)
str(training)
model1=lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data=training)
summary(model1)
cor(N2O,CFC.11)
cor(training$N2O,training$CFC.11)
cor(training$N2O,training$TSI)
cor(training$N2O,training$Aerosols)
cor(training$N2O,training$CO2)
attach(training)
detach(training)
cor(training$N2O, training$MEI)
cor(training$N2O, training$CO2)
cor(training$N2O, training$CH4)
cor(training$N2O, training$CFC.11)
cor(training$N2O, training$CFC.12)
cor(training$N2O, training$Aerosols)
cor(training$N2O, training$TSI)
cor(training$CFC.11, training$MEI)
cor(training$CFC.11, training$CO2)
cor(training$CFC.11, training$CH4)
cor(training$CFC.11, training$N2O)
cor(training$CFC.11, training$CFC.12)
cor(training$CFC.11, training$Aerosols)
cor(training$CFC.11, training$TSI)
summary(model1)
model2=lm(Temp ~ MEI + TSI + Aerosols +N2O, data=training)
summary(model2)
summary(model1)
summary(model2)
modelS=step(model1)
summary(modelS)
?predict
predict(modelS, newdata=testing)
pred=predict(modelS, newdata=testing)
rm(pred)
predS=predict(modelS, newdata=testing)
summary(predS)
predS
str(predS)
names(predS)
SSE=sum(predS$residuals^2)
SSE=sum(predS.residuals^2)
SSE=sum(predS^2)
SST=sum(model)
SST=sum(modelS$residuals^2)
R2=(1-(SSE/SST))
R2
setwd("/opt/oracle/admin/The_Analytics_Edge/Datasets")
summary (training)
rm(predS)
predictionForS=predict(modelS, newdata=testing)
SSE=sum((predictionForS-testing$Temp)^2)
SST=sum(mean(modelS$Temp)-testing$Temp)^2)
SST=sum((mean(modelS$Temp)-testing$Temp)^2)
SST=sum((mean(training$Temp)-testing$Temp)^2)
R2=1-(SSE/SST)
R2
rm(list=ls())
pisaTrain=read.csv("pisaTrain.csv")
pisaTrain=read.csv("pisa2009Train.csv")
pisaTrain=read.csv("pisa2009train.csv")
pisaTest=read.csv("pisa2009test.csv")
summary(pisaTrain)
str(pisaTrain)
tapply(pisa$readingScore == 1, pisa$male, avg)
tapply(pisa$readingScore == 1, pisa$male, mean)
tapply(pisaTrain$readingScore == 1, pisaTrain$male, mean)
tapply(pisaTrain$readingScore, pisaTrain$male, mean)
summary(oisaTrain)
summary(pisaTrain)
pisaTrain = na.omit(pisaTrain)
pisaTest = na.omit(pisaTest)
nrow(pisTrain)
nrow(pisaTrain)
nrow(pisaTest)
str(pisaTrain)
rm(list=ls())
ls()
FluTrain=read.csv('FluTrain.csv')
str(FluTrain)
summary(FluTrain)
FluTrain[FluTrain$ILI == max(FluTrain$ILI),]
FluTrain[FluTrain$Queries == max(FluTrain$Queries),]
max(FluTrain$Queries)
hist(FluTrain$ILI)
plot(FluTrain$Queries, log(FluTrain$ILI))
plot(log(FluTrain$ILI), FluTrain$Queries)
plot(FluTrain$Queries, log(FluTrain$ILI))
plot(log(FluTrain$ILI), FluTrain$Queries)
plot(FluTrain$ILI, FluTrain$Queries)
plot(log(FluTrain$ILI), FluTrain$Queries)
cor(FluTrain)
cor(FluTrain$Queries, FluTrain$ILI)
cor(FluTrain$ILI, FluTrain$Queries)
lm1=lm(log(FluTrain$ILI ~ FluTrain$Queries))
lm1=lm(log(FluTrain$ILI) ~ FluTrain$Queries))
lm1=lm(log(FluTrain$ILI) ~ FluTrain$Queries)
summary(lm1)
rm(lm1)
FluTrend1=lm(log(FluTrain$ILI) ~ FluTrain$Queries)
summary(FluTrain1)
summary(FluTrend1)
cor(log(FluTrain$ILI), FluTrain$Queries)
cor1=cor(log(FluTrain$ILI), FluTrain$Queries)
cor2=cor(FluTrain$ILI, FluTrain$Queries)
cor1
cor2
exp(-0.5*cor1)
exp(-0.5*cor2)
log(1/cor1)
cor1^2
c(exp(-0.5*cor1),log(1/cor1),cor1^2)
summary(FluTrend1)
c(exp(-0.5*cor1),log(1/cor1),cor1^2)
FluTest=read.csv("FluTest.csv")
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
PredTest1
?which
head(FluTest)
which(FluTest$Week == '2012-03-11 - 2012-03-17')
PredTest1[11]
head (FluTest)
head(FluTest, 20)
head (PredTest1)
head (PredTest1,20)
p=predict(FluTrend1, newdata=FluTest)
summary(FluTest)
FluTest=read.csv("FluTest.csv")
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
PredTest1[11]
summary(FluTrend1)
FluTest[11,]
P[11]
p[11]
FluTrend1=lm(log(FluTrain$ILI) ~ FluTrain$Queries, data=FluTrain)
summary(FluTrend1)
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
FluTrend1=lm(log(ILI) ~ Queries, data=FluTrain)
summary(FluTrend1)
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
which(FluTest$Week == '2012-03-11 - 2012-03-17')
PredTest1[11]
rm(p)
FluTest[11]
FluTest$LIL[11]
FluTest[11,]
2.187378/2.293422
1-2.187378/2.293422
SSE=sum((PredTest1-FluTest1$LIL)^2)
SSE=sum((PredTest1-FluTest$LIL)^2)
RMSE=sqrt(SSE/nrow(FluTest))
SSE
RMSE
PredTest1
FluTest$LIL
View(FluTest)
SSE=sum((PredTest1-FluTest$ILI)^2)
RMSE=sqrt(SSE/nrow(FluTest))
SSE
RMSE
install.packages("zoo")
file.edit('~/.Renviron')
install.packages("zoo")
